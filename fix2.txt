		Laboration 1 Javaverktyg och byggmiljöer

1.	Skapa ett git repo med en branch kallad main.
1.1.	mkdir GitExercises
1.2.	cd GitExercises
1.3.	git init
1.4.	git checkout -b main

2.	Skapa en fil som heter README.md och lägg till 3 rader med djur i filen.
2.1.	echo "duck" > README.md
2.2.	echo "moose" >> README.md 
2.3.	echo "cat" >> README.md

3.	Gör en commit med message: Initial commit
3.1.	git add README.md
3.2.	git commit -m "Initial commit"
3.3.	git status

4.	Skapa en ny branch med namnet feature1 och växla över till den.
4.1.	git checkout -b feature1
4.2.	git branch

5.	Lägg till dog sist i filen som ett fjärde djur och byt ut moose mot mouse samt gör en commit med lämpligt message.
5.1.	sed -i 's/moose/mouse/g' README.md 
5.2.	echo "dog" >> README.md
5.3.	git diff
5.4.	git add README.md
5.5.	git commit -m "Add dog and replace moose with mouse"
5.6.	git log

6.	Växla tillbaka till main och ändra moose till mahmut och gör en commit.
6.1.	git checkout main 
6.2.	sed -i 's/moose/mahmut/g' README.md 
6.3.	git add README.md
6.4.	git commit -m "Change moose to mahmut"

7.	Merga nu feature1 grenen med main. Om du gjort rätt tidigare så bör det nu uppstå en merge conflict som behöver lösas och resultatet ska efter merge vara: duck mahmut mouse cat dog.
7.1.	git log --oneline --graph --all
7.2.	git merge feature1
7.3.	notepad README.md
7.4.	git add README.md
7.5.	git merge --continue 

8.	Skapa en lightweight tag med namnet: extinct som pekar på merge commiten.
8.1.	git log --oneline --graph --all
8.2.	git tag -a extinct 340a3ee
8.3.	git show extinct

9.	Använd nu lämpligt git kommando för att flytta main och HEAD tillbaka till föregående commit på main branchen. README filen ska nu endast innehålla duck mahmut cat
9.1.	git log --oneline --graph --all
9.2.	git checkout 0f04ce5

10.	Skapa en commit som gör så alla djurnamnen börjar med stor bokstav.
10.1.	notepad README.md
10.2.	git add README.md
10.3.	git commit -m "Fix uppercase"

11.	Skapa en ny feature2 gren men stanna kvar på main grenen.
11.1.	git checkout main
11.2.	git branch feature2

12.	Växla nu till feature2 och skapa två commits där första commiten lägger till en fil som heter fix1.txt och den andra commiten lägger till en fil som heter fix2.txt.
12.1.	git checkout feature2 
12.2.	echo > fix1.txt
12.3.	git add fix1.txt
12.4.	git commit -m "Add fix1.txt"
12.5.	echo > fix2.txt
12.6.	git add fix2.txt
12.7.	git commit -m "Add fix2.txt"

13.	Byt tillbaka till main branchen och se att filerna fix1 och fix2 försvunnit i vårt lokala filsystem.
13.1.	git checkout main
13.2.	ls

14.	Gör nu en cherry-pick på commiten som lägger till fix2.txt över till main grenen.
14.1.	git log --oneline --graph --all
14.2.	git cherry-pick bd12ffd

15.	I filen fix2.txt ska du nu skriva in de kommandon som användes för att utföra stegen hit fram.
15.1.	git add fix2.txt
15.2.	git commit -m "Add all git commands to fix2.txt"
15.3.	git log --oneline --graph –all

16.	Skapa ett tomt repository på github och pusha all information från det lokala till remote 
	repositoriet. Uppdatera fix2.txt med de kommandon som användes för att publisera på github och skapa en ny commit för detta som också pushas till github.
16.1.	git remote add origin https://github.com/ByHatice/LearnGit.git 
16.2.	git branch -M main
16.3.	git push -u origin main
16.4.	git checkout feature2
16.5.	git push -u origin feature2
16.6.	git push origin extinct  
16.7.	git checkout main  
16.8.	git add  fix2.txt
16.9.	git commit -m "Add exercise 15 and 16"
16.10.	git push -u origin main

17.	Skapa en .gitignore fil och lägg till instruktioner i den för följande: 
Ignorera alla filer med filändelsen jar 
Ignorera alla filer i katalogerna out och target 
Tillåt filer som slutar med html även om den finns under katalogen target. 
Prova att skapa filer i ditt working tree för att se om det fungerar som tänkt. Glöm inte commit och push. Följande branches, tags och commits bör nu finnas i repositoriet.
17.1.	touch .gitignore
17.2.	.git add .gitignore
17.3.	git commit -m "Add .gitignore"
17.4.	git push -u origin main

18.	Skapa en annoterad tag för den senaste commiten som main pekar på. Ge taggen namnet v1.0 och message ”Version 1.0”
18.1.	git tag -a v1.0 -m "Verion 1.0"
18.2.	git show v1.0
18.3.	git push origin v1.0

19.	Använd nu git rebase -i för att genomföra en interactive rebase av de två senaste commit som finns i main branchen. Vi vill slå ihop dessa två commits till en ny som lägger till fix2.txt filen och dess innehåll i en enda commit med lämpligt message.
19.1.	git rebase -i HEAD~2
19.2.	git push -f 

20.	Uppdatera fix2.txt med de nya commandon som användes i steg 18,19 och som behövs för att 
färdigställa den här punkten 20!… Gör detta i en feature3 branch som mergas in i main med egen 
merge commit! Kommer du på fler commandon som behöver göras för att allt ska bli klart? Ångra 
merge commiten och använd amend på feature branchen tills allt är med i en enda commit där.
20.1.	git checkout feature1
20.2.	git push -u origin feature1 //glömde pusha det tidigare 
20.3.	git checkout -b feature3
20.4.	notepad fix2.txt
20.5.	git add fix2.txt
20.6.	git commit -m "Update fix2.txt with final commands"
20.7.	git switch main
20.8.	git merge feature3
20.9.	git push
20.10.	git checkout feature3
20.11.	push -u origin feature3

